"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.updateFood=exports.removeFood=exports.removeAllFoods=exports.gptCorrection=exports.getSingleFood=exports.getAllFoods=exports.generateTextGpt=exports.generateTextFromImageGPT=exports.generateText=exports.generateImage=exports.addFood=void 0;var _dotenv=_interopRequireDefault(require("dotenv"));var _helpers=require("../helpers");var _models=require("../models");var _mongoose=_interopRequireDefault(require("mongoose"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}_dotenv.default.config();const getAllFoods=async(req,res)=>{const{userId}=req.query;const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);try{if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}const userFoodList=await _models.UserFoodList.findOne({userId},{userFoodList:1,userId:1});res.status(200).json(userFoodList)}catch(error){res.status(500).json({message:"Internal server error"})}};exports.getAllFoods=getAllFoods;const addFood=async(req,res)=>{const{userId,food}=req.body;const convertedUserId=new _mongoose.default.Types.ObjectId(userId);const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);try{if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}const user=await _models.UserFoodList.findOne({userId:convertedUserId});if(user){// Update the user's food list by adding each item in the array
const userFoodList=await _models.UserFoodList.findOneAndUpdate({userId:convertedUserId},{$push:{userFoodList:{$each:food}}},// Use $each to push all items in the array
{new:true});return res.status(200).json(userFoodList)}// If user does not exist, create a new entry with the food array
const userFood=await _models.UserFoodList.create({userId:convertedUserId,userFoodList:food// Directly assign the array to userFoodList
});res.status(200).json(userFood)}catch(error){res.status(500).json({message:"Internal server error"})}};exports.addFood=addFood;const removeFood=async(req,res)=>{const{userId,foodId,recipeId}=req.body;const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);try{if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}if(recipeId){const removedFood=await _models.UserFoodList.updateOne({userId,"userFoodList._id":foodId},{$pull:{"userFoodList.$.foodList":{_id:recipeId}}});return res.status(200).json({message:"Recipe removed",removedFood})}await _models.UserFoodList.updateOne({userId:userId,"userFoodList._id":foodId},// find a document with userId and foodId
{"userFoodList.$.isRemoved":true}// set isRemoved to true
);res.status(200).json({message:"Food removed"})}catch(error){res.status(500).json({message:"Internal server error"})}};exports.removeFood=removeFood;const removeAllFoods=async(req,res)=>{const{userId}=req.body;const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);try{if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}const removedFood=await _models.UserFoodList.updateOne({userId},{$set:{userFoodList:[]}});res.status(200).json({message:"All foods removed",removedFood})}catch(error){res.status(500).json({message:"Internal server error"})}};exports.removeAllFoods=removeAllFoods;const updateFood=async(req,res)=>{const{userId,foodId,food}=req.body;const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);const updatedProperties={};for(const key in food){if(food.hasOwnProperty(key)){updatedProperties[`userFoodList.$.${key}`]=food[key]}}try{if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}const updatedFood=await _models.UserFoodList.findOneAndUpdate({userId:userId,"userFoodList._id":foodId},{$set:{...updatedProperties}},{new:true});return res.status(200).json({message:"Food updated",updatedFood})}catch(error){res.status(500).json({message:"Internal server error"})}};exports.updateFood=updateFood;const generateText=async(req,res)=>{const{obj}=req.body;function convertTextToObject(text){// Extract the JSON string using a regular expression
const jsonStringMatch=text.match(/```json\n([\s\S]*?)\n```/);if(!jsonStringMatch||jsonStringMatch.length<2){throw new Error("Invalid input format")}const jsonString=jsonStringMatch[1];// Parse the JSON string into an object
const jsonObject=JSON.parse(jsonString);return jsonObject}function convertObjectToArray(data){return Object.entries(data).map(([name,details])=>({name,//@ts-ignore
...details}))}function stringifyValues(obj){if(typeof obj!=="object"||obj===null){return String(obj)}if(Array.isArray(obj)){return obj.map(item=>stringifyValues(item))}return Object.keys(obj).reduce((acc,key)=>{acc[key]=stringifyValues(obj[key]);return acc},{})}try{var _text$candidates$,_text$candidates$$con,_text$candidates$$con2;const resp=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GENERATIVE_API_KEY}`,{method:"POST",headers:{"Content-Type":"application/json"},body:`{
      "contents": [{
        "parts":[{"text": "You are a nutrition analysis assistant. Your role involves  analyze the nutritional value of the following product(s) and return the result object, each containing the following keys: name, type, calories, protein, fat, carbs, water, serving, and weight. example structure: Pepsi: { type: drink, calories: 42 kcal, protein: 0 g, fat: 0 g, carbs: 11 g, water: 89 g, serving: Can,weight: 330 g } do not return text. Here are the products: ${obj}"}]
        }]
       }`});const text=await resp.json();const productArr=text===null||text===void 0?void 0:(_text$candidates$=text.candidates[0])===null||_text$candidates$===void 0?void 0:(_text$candidates$$con=_text$candidates$.content)===null||_text$candidates$$con===void 0?void 0:(_text$candidates$$con2=_text$candidates$$con.parts[0])===null||_text$candidates$$con2===void 0?void 0:_text$candidates$$con2.text;const converted=convertTextToObject(productArr);const arr=convertObjectToArray(converted);const stringified=stringifyValues(arr);res.status(200).json({message:"Text generated",data:stringified})}catch(error){res.status(500).json({message:"Internal server error",error})}};exports.generateText=generateText;const generateImage=async(req,res)=>{const{image}=req.body;const data={contents:[{role:"user",parts:[{text:"You are a nutrition analysis assistant. Your role involves using the analyze_nutritional_value_from_photo function to analyze the nutritional value of the following product(s) and return the result as an array of JSON objects, each containing the following keys: name, type, calories, protein, fat, carbs, water, serving, and weight. When provided with an image of a food item, whether packaged, fresh, or as part of a meal, analyze the content and return the nutritional values normalized for a 100-gram portion. The response should identify the item or items and estimate the serving size and total weight of the serving. The serving parameter should reflect the quantity and size seen in the photo (e.g., '5 medium apples' if there are 5 apples, '1 large burger' if there is one large burger). The weight should be the total weight for the quantity observed. Format the response as plain text JSON objects with the identified name of the item as the top-level key."},{inlineData:{mimeType:"image/jpeg",data:image.replace(/^data:image\/jpeg;base64,/,"")}}]}],tools:[{function_declarations:[{name:"analyze_nutritional_value_from_photo",description:"Analyze the nutritional value of one or more food or drink items from photo data and return the nutritional value per 100 grams (name, type, calories, protein, fat, carbs, water, serving, and weight) of each product as plain text JSON objects.",parameters:{type:"object",properties:{name:{type:"string",description:"Name of the food or drink item."},type:{type:"string",description:"Type of the product (food or drink)."},calories:{type:"string",description:"Calories per 100 grams of the product."},protein:{type:"string",description:"Protein content per 100 grams of the product."},fat:{type:"string",description:"Fat content per 100 grams of the product."},carbs:{type:"string",description:"Carbohydrate content per 100 grams of the product."},water:{type:"string",description:"Water content per 100 grams of the product."},serving:{type:"string",description:"Serving size or type based on the quantity and size observed in the photo."},weight:{type:"string",description:"Total weight of the serving based on the quantity and size observed in the photo."}},required:["name","type","calories","protein","fat","carbs","water","serving","weight"]}}]}],tool_config:{function_calling_config:{mode:"ANY",allowed_function_names:["analyze_nutritional_value_from_photo"]}}};try{var _text$candidates$2,_text$candidates$2$co,_text$candidates$2$co2;const result=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key=${process.env.GENERATIVE_API_KEY}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(data)});const text=await result.json();const outputString=text===null||text===void 0?void 0:(_text$candidates$2=text.candidates[0])===null||_text$candidates$2===void 0?void 0:(_text$candidates$2$co=_text$candidates$2.content)===null||_text$candidates$2$co===void 0?void 0:(_text$candidates$2$co2=_text$candidates$2$co.parts)===null||_text$candidates$2$co2===void 0?void 0:_text$candidates$2$co2.map(item=>{var _item$functionCall;return item===null||item===void 0?void 0:(_item$functionCall=item.functionCall)===null||_item$functionCall===void 0?void 0:_item$functionCall.args});res.status(200).json({message:"Text generated",data:outputString})}catch(error){res.status(500).json({message:"Internal server error",error})}};exports.generateImage=generateImage;const generateTextFromImageGPT=async(req,res)=>{const{image}=req.body;try{var _text$error;const data={model:"gpt-4o",messages:[{role:"system",content:"You are a nutrition analysis assistant. Your role is to analyze the nutritional value of all food and drink items in a given image. Each item should be analyzed separately, and the results should be returned as an array of JSON objects."},{role:"system",content:"Each JSON object should contain the following keys: name, type, calories, protein, fat, carbs, water, serving, and weight. The nutritional values should be normalized for a 100-gram portion."},{role:"system",content:"When provided with an image of one or multiple food items, whether packaged, fresh, or as part of a meal, identify and analyze each item separately. Ensure that the response includes separate JSON objects for each recognized item in the image. For each item, correctly identify the quantity and size of items (e.g., '4 medium tomatoes'). The serving parameter should reflect the quantity and type of items seen in the photo, and the weight should reflect the total weight for the serving size in the photo."},{role:"user",content:[{type:"text",text:"Analyze the nutritional value of these food items."},{type:"image_url",image_url:{url:`data:image/jpeg;base64,${image}`}}]}],functions:[{name:"analyze_nutritional_value_from_photo",description:"Analyze the nutritional value of multiple food or drink items from photo data. Return the nutritional value per 100 grams for each item in the image. The response should be an array of JSON objects, each containing: name, type, calories, protein, fat, carbs, water, serving, and weight. Each item must be analyzed and returned as a separate JSON object.",parameters:{type:"object",properties:{items:{type:"array",items:{type:"object",properties:{name:{type:"string",description:"Name of the food or drink item."},type:{type:"string",description:"Type of the product (food or drink)."},calories:{type:"string",description:"Calories per 100 grams of the product."},protein:{type:"string",description:"Protein content per 100 grams of the product."},fat:{type:"string",description:"Fat content per 100 grams of the product."},carbs:{type:"string",description:"Carbohydrate content per 100 grams of the product."},water:{type:"string",description:"Water content per 100 grams of the product."},serving:{type:"string",description:"Serving size or type. Reflects the quantity and size of items in the photo."},weight:{type:"string",description:"Weight of the serving. Reflects the total weight for the serving size in the photo."}},required:["name","type","calories","protein","fat","carbs","water","serving","weight"]}}},required:["items"]}}],function_call:{name:"analyze_nutritional_value_from_photo"}};const result=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${process.env.OPENAI_API_KEY}`},body:JSON.stringify(data)});const text=await result.json();if(text!==null&&text!==void 0&&(_text$error=text.error)!==null&&_text$error!==void 0&&_text$error.message){return res.status(500).json({message:"Internal server error",error:text.error.message})}if(text){var _text$choices$,_text$choices$$messag,_text$choices$$messag2;const outPut=(0,_helpers.convertArgumentsToJSON)(text===null||text===void 0?void 0:(_text$choices$=text.choices[0])===null||_text$choices$===void 0?void 0:(_text$choices$$messag=_text$choices$.message)===null||_text$choices$$messag===void 0?void 0:(_text$choices$$messag2=_text$choices$$messag.function_call)===null||_text$choices$$messag2===void 0?void 0:_text$choices$$messag2.arguments);const arr=outPut===null||outPut===void 0?void 0:outPut.items;res.status(200).json({message:"Text generated",data:arr})}}catch(error){res.status(500).json({message:"Internal server error",error})}};exports.generateTextFromImageGPT=generateTextFromImageGPT;const gptCorrection=async(req,res)=>{const{userInput,original_response_as_a_string}=req.body;try{var _text$error2;const data={model:"gpt-4o",messages:[{role:"system",content:"You are a nutrition analysis assistant. Your role is to analyze and adjust the nutritional value of all food and drink items based on user corrections. Each item should be analyzed separately, and the results should be returned as an array of JSON objects."},{role:"system",content:"Each JSON object should contain the following keys: name, type, calories, protein, fat, carbs, water, serving, and weight. The nutritional values should be normalized for a 100-gram portion."},{role:"system",content:"When provided with correction details for one or multiple food items, update the nutritional values accordingly. Ensure that the response includes separate JSON objects for each corrected item, and make sure to adjust all relevant nutritional values based on the user's input. If the name of the food item is changed, regenerate the nutritional values based on the new name. The serving parameter should reflect the updated quantity and type of items as per the user input, and the weight should reflect the total weight for the updated serving size."},{role:"system",content:`Here is the original response: ${original_response_as_a_string}`},{role:"user",content:`Here are the correction details: ${userInput}`}],functions:[{name:"adjust_nutritional_value",description:"Adjust the nutritional value of multiple food or drink items based on user corrections. Return the corrected nutritional value per 100 grams for each item. The response should be an array of JSON objects, each containing: name, type, calories, protein, fat, carbs, water, serving, and weight. Each corrected item must be analyzed and returned as a separate JSON object with updated values based on user input. If the name of the food item is changed, regenerate the nutritional values based on the new name.",parameters:{type:"object",properties:{corrections_response:{type:"array",items:{type:"object",properties:{name:{type:"string",description:"Name of the food or drink item."},type:{type:"string",description:"Type of the product (food or drink)."},calories:{type:"string",description:"Calories per 100 grams of the product."},protein:{type:"string",description:"Protein content per 100 grams of the product."},fat:{type:"string",description:"Fat content per 100 grams of the product."},carbs:{type:"string",description:"Carbohydrate content per 100 grams of the product."},water:{type:"string",description:"Water content per 100 grams of the product."},serving:{type:"string",description:"Serving size or type. Reflects the quantity and size of items in the corrected analysis."},weight:{type:"string",description:"Weight of the serving. Reflects the total weight for the corrected serving size."}},required:["name","type","calories","protein","fat","carbs","water","serving","weight"]}},user_input:{type:"string",description:"User-provided description of the issues and corrections for the original analysis."}},required:["corrections_response"]}}],function_call:{name:"adjust_nutritional_value"}};const result=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${process.env.OPENAI_API_KEY}`},body:JSON.stringify(data)});const text=await result.json();if(text!==null&&text!==void 0&&(_text$error2=text.error)!==null&&_text$error2!==void 0&&_text$error2.message){return res.status(500).json({message:"Internal server error",error:text.error.message})}res.status(200).json({message:"Text generated",data:text})}catch(error){res.status(500).json({message:"Internal server error",error})}};exports.gptCorrection=gptCorrection;const getSingleFood=async(req,res)=>{const{userId,foodId}=req.body;const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);try{if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}const userFoodList=await _models.UserFoodList.findOne({userId,"userFoodList._id":foodId},{"userFoodList.$":1});if(!userFoodList){return res.status(404).json({message:"Food not found"})}res.status(200).json(userFoodList)}catch(error){res.status(500).json({message:"Internal server error"})}};exports.getSingleFood=getSingleFood;const generateTextGpt=async(req,res)=>{const{text}=req.body;const data={model:"gpt-4o",messages:[{role:"system",content:"You are a nutrition analysis assistant. Your role is to analyze the nutritional value of all food and drink items based on their names provided as text. Each item should be analyzed separately, and the results should be returned as an array of JSON objects."},{role:"system",content:"Each JSON object should contain the following keys: name, type, calories, protein, fat, carbs, water, serving, and weight. The nutritional values should be normalized for a 100-gram portion."},{role:"system",content:"When provided with the name of one or multiple food items, identify and analyze each item separately. Ensure that the response includes separate JSON objects for each recognized item in the text. For each item, correctly identify the quantity and size of items (e.g., '4 medium tomatoes'). The serving parameter should reflect the quantity and type of items described in the text, and the weight should reflect the total weight for the serving size specified in the text."},{role:"user",content:[{type:"text",text:`Analyze the nutritional value of these food items: ${text}`}]}],functions:[{name:"analyze_nutritional_value_from_text",description:"Analyze the nutritional value of multiple food or drink items based on their names provided as text. Return the nutritional value per 100 grams for each item. The response should be an array of JSON objects, each containing: name, type, calories, protein, fat, carbs, water, serving, and weight. Each item must be analyzed and returned as a separate JSON object.",parameters:{type:"object",properties:{items:{type:"array",items:{type:"object",properties:{name:{type:"string",description:"Name of the food or drink item."},type:{type:"string",description:"Type of the product (food or drink)."},calories:{type:"integer",description:"Calories per 100 grams of the product."},protein:{type:"integer",description:"Protein content per 100 grams of the product."},fat:{type:"integer",description:"Fat content per 100 grams of the product."},carbs:{type:"integer",description:"Carbohydrate content per 100 grams of the product."},water:{type:"integer",description:"Water content per 100 grams of the product."},serving:{type:"string",description:"Serving size or type. Reflects the quantity and size of items described in the text."},weight:{type:"integer",description:"Weight of the serving. Reflects the total weight for the serving size described in the text."}},required:["name","type","calories","protein","fat","carbs","water","serving","weight"]}}},required:["items"]}}],function_call:{name:"analyze_nutritional_value_from_text"}};try{var _dataRes$error;const result=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${process.env.OPENAI_API_KEY}`},body:JSON.stringify(data)});const dataRes=await result.json();if(dataRes!==null&&dataRes!==void 0&&(_dataRes$error=dataRes.error)!==null&&_dataRes$error!==void 0&&_dataRes$error.message){return res.status(500).json({message:"Internal server error",error:dataRes.error.message})}if(dataRes){var _dataRes$choices$,_dataRes$choices$$mes,_dataRes$choices$$mes2;const outPut=(0,_helpers.convertArgumentsToJSON)(dataRes===null||dataRes===void 0?void 0:(_dataRes$choices$=dataRes.choices[0])===null||_dataRes$choices$===void 0?void 0:(_dataRes$choices$$mes=_dataRes$choices$.message)===null||_dataRes$choices$$mes===void 0?void 0:(_dataRes$choices$$mes2=_dataRes$choices$$mes.function_call)===null||_dataRes$choices$$mes2===void 0?void 0:_dataRes$choices$$mes2.arguments);const arr=outPut===null||outPut===void 0?void 0:outPut.items;res.status(200).json({message:"Text generated",data:arr})}}catch(error){res.status(500).json({message:"Internal server error",error})}};exports.generateTextGpt=generateTextGpt;