"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.updateUserWeight=exports.getUserWeight=exports.deleteSingleUserWeight=exports.deleteAllUserWeights=exports.addUserWeight=exports.addUserMultipleWeights=void 0;var _helpers=require("../helpers");var _models=require("../models");const addUserWeight=async(req,res)=>{const{weight,userId,date}=req.body;try{const isValid=(0,_helpers.isValidId)(userId);const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);if(!isValid){return res.status(422).json({message:"Invalid userId"})}if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}const weightExists=await _models.Weight.findOne({userId,date});if(weightExists){const updatedWeight=await _models.Weight.findByIdAndUpdate(weightExists._id,{weight});return res.status(200).json({updatedWeight,message:"Weight updated"})}const newWeight=await _models.Weight.create({weight,userId,date});res.status(201).json({message:"Weight added",newWeight})}catch(error){res.status(500).json({message:"Something went wrong..."})}};exports.addUserWeight=addUserWeight;const addUserMultipleWeights=async(req,res)=>{const{weights,userId}=req.body;try{const isValid=(0,_helpers.isValidId)(userId);const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);if(!isValid){return res.status(422).json({message:"Invalid userId"})}if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}const operations=weights.map(weight=>({updateOne:{filter:{userId,date:weight.date},update:{$set:{...weight,userId}},upsert:true}}));const result=await _models.Weight.bulkWrite(operations);res.status(201).json({message:"Weights added/updated",result})}catch(error){console.error("Error adding/updating weights:",error);res.status(500).json({message:"Something went wrong..."})}};exports.addUserMultipleWeights=addUserMultipleWeights;const deleteAllUserWeights=async(req,res)=>{const{userId}=req.body;const isValid=(0,_helpers.isValidId)(userId);const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);try{if(!isValid){return res.status(422).json({message:"Invalid userId"})}if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}await _models.Weight.deleteMany({userId});res.status(200).json({message:"All weights deleted"})}catch(error){res.status(500).json({message:"Something went wrong..."})}};exports.deleteAllUserWeights=deleteAllUserWeights;const getUserWeight=async(req,res)=>{const{userId}=req.params;const isValid=(0,_helpers.isValidId)(userId);const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);try{if(!isValid){return res.status(422).json({message:"Invalid userId"})}if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}const weights=await _models.Weight.find({userId},{__v:0});res.status(200).json(weights)}catch(error){res.status(500).json({message:"Something went wrong..."})}};exports.getUserWeight=getUserWeight;const updateUserWeight=async(req,res)=>{const{weight,userId,date}=req.body;try{const isValid=(0,_helpers.isValidId)(userId);const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);if(!isValid){return res.status(422).json({message:"Invalid userId"})}if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}const updatedWeight=await _models.Weight.findOneAndUpdate({userId,date},{weight});res.status(200).json({updatedWeight,message:"Weight updated"})}catch(error){res.status(500).json({message:"Something went wrong..."})}};exports.updateUserWeight=updateUserWeight;const deleteSingleUserWeight=async(req,res)=>{const{userId,weightId}=req.body;const isValid=(0,_helpers.isValidId)(userId);const isValidWeightId=(0,_helpers.isValidId)(weightId);const isUserIdValid=(0,_helpers.decodeTokenAndGetUserId)(req,userId);try{if(!isValid||!isValidWeightId){return res.status(422).json({message:"Invalid userId"})}if(!isUserIdValid){return res.status(403).json({message:"Not authorized"})}await _models.Weight.deleteOne({userId,_id:weightId});res.status(200).json({message:"Weight deleted"})}catch(error){res.status(500).json({message:"Something went wrong..."})}};exports.deleteSingleUserWeight=deleteSingleUserWeight;